module fsm_toggle (
    input clk,        // Clock signal
    input reset,      // Reset signal
    input in,         // Input that controls state transitions
    output reg out    // Output signal, active in state S1
);

    // State declaration
    typedef enum reg [1:0] {S0, S1} state_t;
    state_t current_state, next_state;

    // State transition logic (combinational)
    always @(*) begin
        case (current_state)
            S0: if (in) next_state = S1;
                else next_state = S0;
            S1: if (in) next_state = S0;
                else next_state = S1;
            default: next_state = S0; // Default to initial state
        endcase
    end

    // State update logic (sequential)
    always @(posedge clk or posedge reset) begin
        if (reset) 
            current_state <= S0;  // Initialize to S0 on reset
        else 
            current_state <= next_state;
    end

    // Output logic
    always @(*) begin
        case (current_state)
            S0: out = 0;
            S1: out = 1;
            default: out = 0;
        endcase
    end

endmodule
module fsm_toggle_tb;

    // Inputs
    reg clk;
    reg reset;
    reg in;

    // Outputs
    wire out;

    // Instantiate the FSM
    fsm_toggle uut (
        .clk(clk),
        .reset(reset),
        .in(in),
        .out(out)
    );

    // Clock generation
    initial begin
        clk = 0;
        forever #5 clk = ~clk;  // Toggle clock every 5 time units
    end

    // Apply test stimulus
    initial begin
        // Initialize inputs
        reset = 1;
        in = 0;
        
        // Apply reset
        #10 reset = 0;
        
        // Test case 1: Remain in S0 when input is 0
        #10 in = 0;
        #10 in = 0;
        
        // Test case 2: Toggle to S1 when input is 1
        #10 in = 1;
        #10 in = 1;

        // Test case 3: Toggle back to S0
        #10 in = 1;
        
        // End simulation
        #20 $finish;
    end

    // Monitor changes
    initial begin
        $monitor("Time = %0t, reset = %b, in = %b, out = %b", $time, reset, in, out);
    end

endmodule
